<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- ===================================== ARGS ======================================== -->
    <!-- directory with configuration files -->
    <arg name="config_base_path" default="$(find hubero_ros)/config/planning"/>

    <!-- Planners -->
    <!-- NOTE: suffixes enable to differentiate planner parameters between actors -->
    <arg name="global_planner" default="global_planner"/>
    <arg name="global_planner_suffix" default=""/>
    <arg name="local_planner" default="dwa"/>
    <arg name="local_planner_suffix" default=""/>

    <!-- allows running with gdb -->
    <arg name="debug" default="false"/>

    <!-- Namespaces -->
    <!-- Specific actor identifier -->
    <arg name="actor_name" default="actor"/>
    <!-- Namespace where communication channels (nodes) of simulated actors will be available -->
    <arg name="main_ns" default="hubero"/>
    <!-- Sensor data namespace -->
    <arg name="sensors_ns" default="receptor"/>
    <!-- Actor namespace -->
    <arg name="actor_ns" value="/$(arg main_ns)/$(arg actor_name)"/>

    <!-- Map -->
    <!-- Path to the map file, necessary to be overwritten if use_shared_map is set to true -->
    <arg name="map_file" default=""/>
    <!-- If set to false, new instance of map_server will be ran and new static map topic will be published within actor_name -->
    <arg name="use_shared_map" default="true"/>
    <!-- map_topic argument can be overwritten only if use_shared_map was set to true -->
    <arg name="map_topic" default="/map"/>
    <!-- map_topic_name is set to map_topic if shared map was selected to use; 'actor_ns' because of 'ns' of the map_server -->
    <arg name="map_topic_name" value="$(arg map_topic)" if="$(arg use_shared_map)"/>
    <arg name="map_topic_name" value="$(arg actor_ns)/map" unless="$(arg use_shared_map)"/>
    <!-- Map bounds define how far the actor can move around. Run rviz with a required map and use "Publish Point" tool,
    subscribing to "/clicked_point" topic. Format: [xmin, xmax, ymin, ymax] -->
    <arg name="map_bounds" default="[-1.0 1.0 -1.1 1.1]"/>

    <!-- TF frame naming pattern for each actor namespace, e.g. "/actor1/<actor_frames/base>" etc. -->
    <arg name="map_frame" default="map"/>
    <arg name="odom_frame" default="odom"/>
    <arg name="base_frame" default="base_footprint"/>
    <arg name="lidar_frame" default="base_laser_link"/>
    <arg name="camera_frame" default="base_camera_link"/>

    <!-- Prepare full frame names, including specific actor's namespace -->
    <!-- NOTE: this <actor_name>/<frame_name> pattern is also followed in source code - see, e.g. NavigationRos -->
    <arg name="actor_map_frame" value="$(arg map_frame)" if="$(arg use_shared_map)"/>
    <arg name="actor_map_frame" value="$(arg actor_name)/$(arg map_frame)" unless="$(arg use_shared_map)"/>
    <arg name="actor_odom_frame" value="$(arg actor_name)/$(arg odom_frame)"/>
    <arg name="actor_base_frame" value="$(arg actor_name)/$(arg base_frame)"/>
    <arg name="actor_lidar_frame" value="$(arg actor_name)/$(arg lidar_frame)"/>
    <arg name="actor_camera_frame" value="$(arg actor_name)/$(arg camera_frame)"/>

    <!-- Name of the frame used as a reference in simulator poses etc. usually, frame at the top of the ROS TF tree -->
    <arg name="simulator_global_frame" default="world"/>

    <!-- Actor's map center pose relative to the world center pose -->
    <arg name="tf_world_map" default="+0.00 +0.00 +0.00 +0.00 +0.00 +0.00"/>

    <!-- actor's `tf_lidar` and `tf_camera` must correspond to attributes written to .world file -->
    <!-- NOTE: additional rotations were applied to tf_camera -->
    <arg name="tf_lidar" default="+0.55 +0.00 -0.80 +0.00 +0.00 +0.00"/>
    <arg name="tf_camera" default="+0.15 +0.00 +0.55 +1.57 +3.14 +1.57"/>

    <!-- Topic names related to navigation - each simulated actor is connected to such a topic set -->
    <arg name="nav_ns" value="navigation"/>
    <arg name="nav_get_plan_topic" default="$(arg nav_ns)/make_plan"/>
    <arg name="nav_command_topic" default="$(arg nav_ns)/cmd_vel"/>
    <arg name="nav_odometry_topic" default="$(arg nav_ns)/odom"/>
    <arg name="nav_feedback_topic" default="$(arg nav_ns)/feedback"/>
    <arg name="nav_result_topic" default="$(arg nav_ns)/result"/>
    <arg name="nav_get_plan_tolerance" default="1.5"/>

    <!-- Append 'nav' related topics to full topic name that includes specific actor named <actor_name> -->
    <arg name="actor_nav_get_plan_topic" value="$(arg actor_ns)/$(arg nav_get_plan_topic)"/>
    <arg name="actor_nav_command_topic" value="$(arg actor_ns)/$(arg nav_command_topic)"/>
    <arg name="actor_nav_odometry_topic" value="$(arg actor_ns)/$(arg nav_odometry_topic)"/>
    <arg name="actor_nav_feedback_topic" value="$(arg actor_ns)/$(arg nav_feedback_topic)"/>
    <arg name="actor_nav_result_topic" value="$(arg actor_ns)/$(arg nav_result_topic)"/>

    <!-- Sensor data launch parameters -->
    <!-- NOTE: these must be used with caution - see details in 'actor_<sensor>_scan_topic' below -->
    <arg name="base_scan_topic" default="laser_scan"/>
    <arg name="rgbd_scan_topic" default="rgbd_scan"/>

    <!-- Topic names related to sensor data - for Gazebo's Actor plugin, they must match XML tag values from the .world file -->
    <arg name="actor_base_scan_topic" value="$(arg actor_ns)/$(arg sensors_ns)/$(arg base_scan_topic)"/>
    <arg name="actor_rgbd_scan_topic" value="$(arg actor_ns)/$(arg sensors_ns)/$(arg rgbd_scan_topic)"/>

    <!-- Topic names related to Actor status -->
    <arg name="status_topic" default="status"/>
    <arg name="actor_status_topic" default="$(arg actor_ns)/$(arg status_topic)"/>

    <!-- =================================== ACTIONS ======================================= -->
    <!-- Set params whose values are also used in this launch file -->
    <!-- NOTE: these are valid for each actor, therefore lack of 'actor_name' -->
    <param name="hubero_ros/simulator_frame" value="$(arg simulator_global_frame)"/>
    <param name="hubero_ros/namespace" value="$(arg main_ns)"/>
     <!-- name of the namespace that contains topics usable to request tasks from actors (shouldn't be empty) -->
    <param name="hubero_ros/task_namespace" value="task"/>

    <!-- This is a hack for Kinetic: https://answers.ros.org/question/194592/ -->
    <rosparam param="hubero_ros/$(arg actor_name)/navigation/map_bounds" subst_value="True">$(arg map_bounds)</rosparam>
    <param name="hubero_ros/$(arg actor_name)/navigation/get_plan_srv" value="$(arg actor_nav_get_plan_topic)"/>
    <param name="hubero_ros/$(arg actor_name)/navigation/command_topic" value="$(arg actor_nav_command_topic)"/>
    <param name="hubero_ros/$(arg actor_name)/navigation/odometry_topic" value="$(arg actor_nav_odometry_topic)"/>
    <param name="hubero_ros/$(arg actor_name)/navigation/nav_get_plan_tolerance" value="$(arg nav_get_plan_tolerance)"/>
    <param name="hubero_ros/$(arg actor_name)/navigation/feedback_topic" value="$(arg actor_nav_feedback_topic)"/>
    <param name="hubero_ros/$(arg actor_name)/navigation/result_topic" value="$(arg actor_nav_result_topic)"/>

    <param name="hubero_ros/$(arg actor_name)/actor_frames/base" value="$(arg actor_base_frame)"/>
    <param name="hubero_ros/$(arg actor_name)/actor_frames/global_ref" value="$(arg actor_map_frame)"/>
    <param name="hubero_ros/$(arg actor_name)/actor_frames/local_ref" value="$(arg actor_odom_frame)"/>
    <param name="hubero_ros/$(arg actor_name)/actor_frames/lidar" value="$(arg actor_lidar_frame)"/>
    <param name="hubero_ros/$(arg actor_name)/actor_frames/camera" value="$(arg actor_camera_frame)"/>

    <param name="hubero_ros/$(arg actor_name)/status_topic" value="$(arg actor_status_topic)"/>

    <!-- If shared map approach is not used, map server will be started and static tf publisher will start too -->
    <!-- NOTE: in a shared_map approach, user MUST externally run 'shared' map server and publish 'shared' world-map static TF -->
    <group if="$(eval arg('use_shared_map') == false)">
        <!-- start map server with a static map for the agent only if required -->
        <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" ns="$(arg actor_ns)" output="screen">
            <param name="frame_id" value="$(arg actor_map_frame)"/>
        </node>
        <!-- Start world-map static TF broadcast -->
        <node name="world_map_tf_static" pkg="tf" type="static_transform_publisher" ns="$(arg actor_ns)" args="$(arg tf_world_map) $(arg simulator_global_frame) $(arg actor_map_frame) 50"/>
    </group>

    <!-- Start static TF broadcaster -->
    <include file="$(find hubero_ros)/launch/sensor_tf.launch" ns="$(arg actor_ns)">
        <arg name="base_frame" value="$(arg actor_base_frame)"/>
        <arg name="lidar_frame" value="$(arg actor_lidar_frame)"/>
        <arg name="camera_frame" value="$(arg actor_camera_frame)"/>
        <arg name="tf_lidar" value="$(arg tf_lidar)"/>
        <arg name="tf_camera" value="$(arg tf_camera)"/>
    </include>

    <!-- Planning -->
    <include file="$(find hubero_ros)/launch/move_base.launch" ns="$(arg actor_ns)">
        <arg name="nav_node_name" value="$(arg nav_ns)"/>
        <arg name="config_base_path" value="$(arg config_base_path)"/>
        <arg name="global_planner" value="$(arg global_planner)"/>
        <arg name="global_planner_suffix" value="$(arg global_planner_suffix)"/>
        <arg name="local_planner" value="$(arg local_planner)"/>
        <arg name="local_planner_suffix" value="$(arg local_planner_suffix)"/>
        <arg name="odom_topic" value="$(arg actor_nav_odometry_topic)"/>
        <arg name="cmd_vel_topic" value="$(arg actor_nav_command_topic)"/>
        <arg name="map_topic" value="$(arg map_topic_name)"/>
        <arg name="base_scan_topic" value="$(arg actor_base_scan_topic)"/>
        <arg name="rgbd_scan_topic" value="$(arg actor_rgbd_scan_topic)"/>
        <arg name="frame_sensor_laser" value="$(arg actor_lidar_frame)"/>
        <arg name="frame_sensor_camera" value="$(arg actor_camera_frame)"/>
        <arg name="frame_base" value="$(arg actor_base_frame)"/>
        <arg name="frame_global_plan_ref" value="$(arg actor_map_frame)"/>
        <arg name="frame_local_plan_ref" value="$(arg actor_odom_frame)"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>
</launch>
